# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2025-04-29T19:21:22+00:00

from __future__ import annotations

from datetime import date
from typing import List, Optional, Union

from pydantic import BaseModel, Field, PositiveInt, conint


class MedicationSchedule(BaseModel):
    medication_name: str = Field(..., title='Medication Name')
    frequency: conint(lt=16, gt=0) = Field(..., examples=[7], title='Frequency')
    duration_days: Optional[PositiveInt] = Field(
        None, description='Duration in days, must be > 0, if set', examples=[7], title='Duration Days'
    )
    start_date: Optional[date] = Field(None, title='Start Date')
    user_id: PositiveInt = Field(..., title='User Id')
    id: PositiveInt = Field(..., title='Id')
    end_date: Optional[date] = Field(None, examples=['2025-05-06'], title='End Date')
    daily_plan: List[str] = Field(
        ...,
        description='Each reception time is a multiple of 15!',
        examples=[['08:00', '10:30', '12:45', '15:00', '17:30', '19:45', '22:00']],
        title='Daily Plan',
    )


class MedicationScheduleCreate(BaseModel):
    medication_name: str = Field(..., title='Medication Name')
    frequency: conint(lt=16, gt=0) = Field(..., examples=[7], title='Frequency')
    duration_days: Optional[PositiveInt] = Field(
        None, description='Duration in days, must be > 0, if set', examples=[7], title='Duration Days'
    )
    start_date: Optional[date] = Field(None, title='Start Date')
    user_id: PositiveInt = Field(..., title='User Id')


class MedicationScheduleCreateResponse(BaseModel):
    schedule_id: PositiveInt = Field(..., title='Schedule Id')


class MedicationScheduleIdsResponse(BaseModel):
    user_id: PositiveInt = Field(..., title='User Id')
    schedules: List[PositiveInt] = Field(..., title='Schedules')


class NextTakingsMedications(BaseModel):
    schedule_id: PositiveInt = Field(..., title='Schedule Id')
    schedule_name: str = Field(..., title='Schedule Name')
    schedule_times: List[str] = Field(..., title='Schedule Times')


class NextTakingsMedicationsResponse(BaseModel):
    user_id: PositiveInt = Field(..., title='User Id')
    next_takings: List[NextTakingsMedications] = Field(..., title='Next Takings')


class UserCreate(BaseModel):
    pass


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')
